package testing

import (
	"context"
	"log"
	"os"
	"testing"
	"time"

	"order-service/internal/model"
	"order-service/internal/repository"
	"order-service/internal/usecase"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var (
	testRepo    repository.OrderRepository
	orderUc     *usecase.OrderUsecase
	mongoClient *mongo.Client
)

func TestMain(m *testing.M) {
	// MongoDB-–≥–µ “õ–æ—Å—ã–ª—É
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	client, err := mongo.Connect(ctx, options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		log.Fatalf("MongoDB-–≥–µ “õ–æ—Å—ã–ª–∞ –∞–ª–º–∞–¥—ã: %v", err)
	}

	mongoClient = client
	db := client.Database("test_orders_db")
	coll := db.Collection("orders")

	// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π–¥—ñ –±–∞—Å—Ç–∞—É
	testRepo = repository.NewMongoOrderRepository(coll)

	// –ü–∞–±–ª–∏—à–µ—Ä–¥—ñ“£ –æ—Ä–Ω—ã–Ω–∞ nil –±–µ—Ä–µ–º—ñ–∑ (publish —Ç–µ–∫—Å–µ—Ä–º–µ–π–º—ñ–∑)
	orderUc = usecase.NewOrderUsecase(testRepo, nil)

	// –¢–µ—Å—Ç—Ç–µ—Ä–¥—ñ —ñ—Å–∫–µ “õ–æ—Å—É
	code := m.Run()

	// –¢–µ—Å—Ç –±—ñ—Ç—Å–µ ‚Äî –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω —Ç–∞–∑–∞–ª–∞—É
	_ = coll.Drop(context.Background())
	_ = client.Disconnect(context.Background())

	os.Exit(code)
}

func TestIntegrationOrder(t *testing.T) {
	ctx := context.Background()

	// üì¶ –ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å
	order := &model.Order{
		UserID: "user123",
		Products: []model.Product{
			{ProductID: "507f1f77bcf86cd799439011", Quantity: 2},
		},
	}

	id, err := orderUc.CreateOrder(ctx, order)
	if err != nil {
		t.Fatalf("–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ“±—Ä—É —Å”ô—Ç—Å—ñ–∑: %v", err)
	}
	if id == "" {
		t.Fatal("“ö“±—Ä—ã–ª“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç—ã“£ ID –±–æ—Å –±–æ–ª–º–∞—É—ã —Ç–∏—ñ—Å")
	}

	// üîç –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã ID –∞—Ä“õ—ã–ª—ã —ñ–∑–¥–µ—É
	foundOrder, err := orderUc.GetOrder(ctx, id)
	if err != nil {
		t.Fatalf("–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∞–ª—É —Å”ô—Ç—Å—ñ–∑: %v", err)
	}
	if foundOrder == nil || foundOrder.UserID != "user123" {
		t.Fatalf("–ö“Ø—Ç—ñ–ª–≥–µ–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å —Ç–∞–±—ã–ª–º–∞–¥—ã, —Ç–∞–ø—Ç—ã: %+v", foundOrder)
	}
}
